from typing import NewType

import psycopg2


PostgresCursor = NewType("PostgresCursor", psycopg2.extensions.cursor)
PostgresConn = NewType("PostgresConn", psycopg2.extensions.connection)

table_drop_customer = "DROP TABLE IF EXISTS events"
table_drop_garage = "DROP TABLE IF EXISTS actors"

table_create_customer = """
    CREATE TABLE IF NOT EXISTS customer (
       Cus_ID int
      ,FullName txt
      ,EmailAddress txt
      ,Requested_Amount int
      ,Age int
      ,Applicant_State_Desc As State txt
      ,Applicant_City_Desc As City txt
      ,Employment_Type_Desc11 txt
      ,Total_Work_Experience int
      ,Product_Name1 txt
      ,Loan_Term int
      ,Cost_Of_Vehicle int
      ,Insurance_Code  int
    )
"""
table_create_garage = """
    CREATE TABLE IF NOT EXISTS garage  (
        GarageID int
      ,name txt
      ,PhoneNumber txt
      ,Address  txt
    
    )
"""


create_table_queries = [
    table_create_customer,
    table_create_garage ,
]
drop_table_queries = [
    table_drop_customer,
    table_drop_garage,
]


def drop_tables(cur: PostgresCursor, conn: PostgresConn) -> None:
    """
    Drops each table using the queries in `drop_table_queries` list.
    """
    for query in drop_table_queries:
        cur.execute(query)
        conn.commit()


def create_tables(cur: PostgresCursor, conn: PostgresConn) -> None:
    """
    Creates each table using the queries in `create_table_queries` list.
    """
    for query in create_table_queries:
        cur.execute(query)
        conn.commit()


def main():
    """
    - Drops (if exists) and Creates the sparkify database.
    - Establishes connection with the sparkify database and gets
    cursor to it.
    - Drops all the tables.
    - Creates all tables needed.
    - Finally, closes the connection.
    """
    conn = psycopg2.connect(
        "host=127.0.0.1 dbname=postgres user=postgres password=postgres"
    )
    cur = conn.cursor()

    drop_tables(cur, conn)
    create_tables(cur, conn)

    conn.close()


if __name__ == "__main__":
    main()
